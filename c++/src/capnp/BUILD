cc_library(
    name = "capnp",
    srcs = [
        # "compat/json.c++",
        # "compat/json.capnp.c++",
        "any.c++",
        "arena.c++",
        "blob.c++",
        "c++.capnp.c++",
        # "capability.c++",
        # "dynamic.c++",
        # "ez-rpc.c++",
        "layout.c++",
        # "list.c++",
        # "membrane.c++",
        "message.c++",
        # "persistent.capnp.c++",
        # "rpc-twoparty.c++",
        # "rpc-twoparty.capnp.c++",
        # "rpc.c++",
        # "rpc.capnp.c++",
        # "schema-loader.c++",
        # "schema-parser.c++",
        # "schema.c++",
        # "schema.capnp.c++",
        "serialize-async.c++",
        "serialize-packed.c++",
        # "serialize-text.c++",
        "serialize.c++",
        # "stringify.c++",
    ],
    hdrs = [
        # "compat/json.capnp.h",
        # "compat/json.h",
        "any.h",
        "arena.h",
        "blob.h",
        "c++.capnp.h",
        # "capability.h",
        "common.h",
        # "dynamic.h",
        "endian.h",
        # "ez-rpc.h",
        "generated-header-support.h",
        "layout.h",
        "list.h",
        # "membrane.h",
        "message.h",
        "orphan.h",
        # "persistent.capnp.h",
        "pointer-helpers.h",
        # "pretty-print.h",
        # "rpc-prelude.h",
        # "rpc-twoparty.capnp.h",
        # "rpc-twoparty.h",
        # "rpc.capnp.h",
        # "rpc.h",
        # "schema-loader.h",
        # "schema-parser.h",
        # "schema.capnp.h",
        # "schema.h",
        "serialize-async.h",
        "serialize-packed.h",
        # "serialize-text.h",
        "serialize.h",
    ],
    copts = [
        "-stdlib=libc++",
        "-std=c++14",
        "-Wall",
        "-Wextra",
        "-Wglobal-constructors",
        "-Wno-sign-compare",
        "-Wno-unused-parameter",
        "-Werror",
        "-DCAPNP_LITE",
    ],
    deps = ["//capnproto/kj"],
    visibility = ["//visibility:public"],
)
